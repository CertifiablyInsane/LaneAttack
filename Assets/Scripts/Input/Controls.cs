//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""33d4a92c-f8b7-46d6-a462-ff46cd8ba3d6"",
            ""actions"": [
                {
                    ""name"": ""Position1"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b1f92674-b528-45b1-8301-3977bd317ff4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch1"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9644c3ee-9c1b-470a-90d7-b6683c13332e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position2"",
                    ""type"": ""PassThrough"",
                    ""id"": ""568cfff8-707c-4e1e-bb15-f06131f5110c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch2"",
                    ""type"": ""PassThrough"",
                    ""id"": ""befec60e-7e70-4845-bac2-135c76993d4a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""75206dfc-d4ec-40a5-ad22-1a6056fd8160"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b66de65-eb71-4f4d-8bc2-cf66c1eb9ca1"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cde4be37-b18a-4b66-981c-84914e68feab"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a74741d2-d702-4277-8646-d8dc8a01da6f"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_Position1 = m_Touch.FindAction("Position1", throwIfNotFound: true);
        m_Touch_Touch1 = m_Touch.FindAction("Touch1", throwIfNotFound: true);
        m_Touch_Position2 = m_Touch.FindAction("Position2", throwIfNotFound: true);
        m_Touch_Touch2 = m_Touch.FindAction("Touch2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch
    private readonly InputActionMap m_Touch;
    private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
    private readonly InputAction m_Touch_Position1;
    private readonly InputAction m_Touch_Touch1;
    private readonly InputAction m_Touch_Position2;
    private readonly InputAction m_Touch_Touch2;
    public struct TouchActions
    {
        private @Controls m_Wrapper;
        public TouchActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position1 => m_Wrapper.m_Touch_Position1;
        public InputAction @Touch1 => m_Wrapper.m_Touch_Touch1;
        public InputAction @Position2 => m_Wrapper.m_Touch_Position2;
        public InputAction @Touch2 => m_Wrapper.m_Touch_Touch2;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void AddCallbacks(ITouchActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
            @Position1.started += instance.OnPosition1;
            @Position1.performed += instance.OnPosition1;
            @Position1.canceled += instance.OnPosition1;
            @Touch1.started += instance.OnTouch1;
            @Touch1.performed += instance.OnTouch1;
            @Touch1.canceled += instance.OnTouch1;
            @Position2.started += instance.OnPosition2;
            @Position2.performed += instance.OnPosition2;
            @Position2.canceled += instance.OnPosition2;
            @Touch2.started += instance.OnTouch2;
            @Touch2.performed += instance.OnTouch2;
            @Touch2.canceled += instance.OnTouch2;
        }

        private void UnregisterCallbacks(ITouchActions instance)
        {
            @Position1.started -= instance.OnPosition1;
            @Position1.performed -= instance.OnPosition1;
            @Position1.canceled -= instance.OnPosition1;
            @Touch1.started -= instance.OnTouch1;
            @Touch1.performed -= instance.OnTouch1;
            @Touch1.canceled -= instance.OnTouch1;
            @Position2.started -= instance.OnPosition2;
            @Position2.performed -= instance.OnPosition2;
            @Position2.canceled -= instance.OnPosition2;
            @Touch2.started -= instance.OnTouch2;
            @Touch2.performed -= instance.OnTouch2;
            @Touch2.canceled -= instance.OnTouch2;
        }

        public void RemoveCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    public interface ITouchActions
    {
        void OnPosition1(InputAction.CallbackContext context);
        void OnTouch1(InputAction.CallbackContext context);
        void OnPosition2(InputAction.CallbackContext context);
        void OnTouch2(InputAction.CallbackContext context);
    }
}
